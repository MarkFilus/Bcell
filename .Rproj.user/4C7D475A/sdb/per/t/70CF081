{
    "contents" : ".libPaths(\"/home/mchikina/R/x86_64-pc-linux-gnu-library/3.1\")\nload(\"BcellShiny.RData\")\nload(\"GCmiSeq.RData\")\nload(\"geneSet.RData\")\nlibrary(ggplot2)\nlibrary(gridExtra)\n#source(\"help.R\")\n\n\nlibrary(shiny)\nlibrary(shinyBS)\n\n\nplotRS=function(input){\n  if (! is.na(match(input$gene, rownames(data)))){\n    theme_set(theme_bw())\n    df=list()\n    \n    df$y=data[input$gene,]\n    df$x=1:ncol(data)\n    df$col=facts\n    df$pop=pop\n    df=as.data.frame(df)\n    p<-ggplot(df, aes(x=x,y=y, color=col, shape=pop))+geom_point(size=5)+ylab(\"counts\")+\n      scale_shape_manual(values=c(1,19))+ggtitle(\"RNAseq\")+theme(text = element_text(size=20))\n    print(p)\n  }\n  else{\n    grid.text(label=paste(\"Gene:\", input$gene, \"is not in dataset\"))\n  }\n}\n\nplotSubset=function(input){\n  if (! is.na(match(input$gene, rownames(subset)))){\n  theme_set(theme_bw())\n  df=list()\n  df$y=subset[input$gene,]\n  df$x=1:length(df$y)\n  df$col=subset.f\n  df=as.data.frame(df)\n  p<-ggplot(df, aes(x=col,\n                    y=y, \n                    color=col, \n                    ymin=mean(y),\n                    ymax=mean(y)))+\n    geom_pointrange(size=2)+ylab(\"log2 Intensity\")+\n    ggtitle(\"SubsetArray\")+theme(text = element_text(size=20))\n  print(p)\n  }\n  else{\n    grid.text(label=paste(\"Gene:\", input$gene, \"is not in dataset\"))\n  }\n}\n\nplotGC=function(input){\n  if (! is.na(match(input$gene, rownames(dataGC)))){\n    theme_set(theme_bw())\n    df=list()\n    df$y=dataGC[input$gene,]\n    df$x=1:length(df$y)\n    df$col=dataGC.f\n    df=as.data.frame(df)\n    p<-ggplot(df, aes(x=col,\n                      y=y, \n                      color=col, \n                      ymin=mean(y),\n                      ymax=mean(y)))+\n      scale_color_brewer(palette=\"Set1\")+\n      geom_pointrange(size=2)+ylab(\"log2 Intensity\")+\n      ggtitle(\"GC Array\")+theme(text = element_text(size=20))\n    print(p)\n  }\n  else{\n    grid.text(label=paste(\"Gene:\", input$gene, \"is not in dataset\"))\n  }\n}\n\n\nplotGCmiseq=function(input){\n  if (! is.na(match(input$gene, rownames(GCmiSeqData)))){\n    theme_set(theme_bw())\n    df=list()\n    df$y=GCmiSeqData[input$gene,]\n    df$x=1:length(df$y)\n    df$col=GCmiSeqFacts\n    df=as.data.frame(df)\n    p<-ggplot(df, aes(x=col,\n                      y=y, \n                      color=col, \n                      ymin=mean(y),\n                      ymax=mean(y)))+\n      scale_color_brewer(palette=\"Set2\")+\n      guides(fill=FALSE)+\n      geom_pointrange(size=2)+ylab(\"Transformed Counts\")+\n      ggtitle(\"GC miSeq\")+theme(text = element_text(size=20))\n    print(p)\n  }\n  else{\n    grid.text(label=paste(\"Gene:\", input$gene, \"is bellow threshold\"))\n  }\n}\n\nshinyServer(function(input, output, session) {\n  \n  \n  output$plotGCmiseq=renderPlot( \n    plotGCmiseq(input)\n  )\noutput$plotRS=renderPlot( \nplotRS(input)\n  )\noutput$plotSubset=renderPlot(\n  plotSubset(input)\n  )\noutput$plotGC=renderPlot(\n  plotGC(input)\n)\n  updateTypeAhead(session, inputId = \"gene\", label = \"Look up gene (Human symbol):\", choices = geneSet)\n  \n})",
    "created" : 1423156217820.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1989485207",
    "id" : "70CF081",
    "lastKnownWriteTime" : 1427918040,
    "path" : "~/ShinyApps/Bcell/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}